{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "The core scheme for RECUSRIVE service descriptors (many details left out)",
  "definitions": {
    "connection_point_types": {
      "enum": [
        "internal",
        "external",
        "management"
      ]
    },
    "interfaces": {
      "enum": [
        "ethernet",
        "ipv4",
        "ipv6"
      ]
    }
  },
  "type": "object",
  "required": [
    "descriptor_version",
    "vendor",
    "name",
    "version"
  ],
  "properties": {
    "descriptor_version": {
      "description": "The version of the descriptor definition",
      "type": "string",
      "pattern": "^[A-Za-z0-9\\-_.]+$"
    },
    "vendor": {
      "description": "Unique id of the descriptor's vendor",
      "type": "string",
      "pattern": "^[a-z0-9\\-_.]+$"
    },
    "name": {
      "description": "The name of the descriptor",
      "type": "string",
      "pattern": "^[a-z0-9\\-_.]+$"
    },
    "version": {
      "description": "The version of the descriptor",
      "type": "string",
      "pattern": "^[0-9\\-_.]+$"
    },
    "author": {
      "description": "The person or organization that created the descriptor",
      "type": "string"
    },
    "description": {
      "description": "A description of the function or service specified by this descriptor",
      "type": "string"
    },
    "licences": {
      "description": "Information on the descriptor's license",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "anyOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The type of licence, 'public' in this case.",
                "type": "string",
                "const": "public"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "url"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "description": "The type of licence, 'private' in this case.",
                "type": "string",
                "const": "private"
              },
              "url": {
                "description": "The URL to the licence file.",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "service_specific_managers": {
      "description": "A list of SSMs used to manage this network service.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "description": "An SSM object of this VNF. FSMs are always Docker containers.",
        "required": [
          "id",
          "image"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "An arbitrary description of the FSM.",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier of this FSM within the scope of this VNF descriptor.",
            "type": "string"
          },
          "image": {
            "description": "The reference to a Docker image.",
            "type": "string"
          },
          "image_md5": {
            "description": "An MD5 hash of the Docker image.",
            "type": "string",
            "pattern": "^[A-Fa-f0-9]{32}$"
          },
          "resource_requirements": {
            "description": "The requirements for the Docker environment that runs the FSM.",
            "type": "object",
            "properties": {
              "docker_version": {
                "description": "The version of Docker needed for this FSM.",
                "type": "string",
                "pattern": "^(== |>= |<= |!= )?[0-9\\-_.]+$"
              }
            }
          },
          "options": {
            "description": "The options as key-value parameters that are passed to the Docker container. Can be used to configure the Docker.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "description": "A key-value parameter object.",
              "required": [
                "key",
                "value"
              ],
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "network_functions": {
      "description": "The VNFs (their descriptors), that are part of this network service.",
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "type": "object",
        "required": [
          "vnf_id",
          "vnf_vendor",
          "vnf_name",
          "vnf_version"
        ],
        "additionalProperties": false,
        "properties": {
          "vnf_id": {
            "description": "A unique identifier of this network function within the scope of this NS descriptor.",
            "type": "string"
          },
          "vnf_vendor": {
            "description": "The vendor id identifies the VNF descriptor uniquely across all function descriptors.",
            "type": "string",
            "pattern": "^[a-z0-9\\-_.]+$"
          },
          "vnf_name": {
            "description": "The name of the function description.",
            "type": "string",
            "pattern": "^[a-z0-9\\-_.]+$"
          },
          "vnf_version": {
            "description": "The version of the function descriptor.",
            "type": "string",
            "pattern": "^(== |>= |<= |!= )?[0-9\\-_.]+$"
          },
          "description": {
            "description": "A longer description of the network function.",
            "type": "string"
          }
        }
      }
    },
    "cloud_services": {
      "description": "The cloud services that a part of this network service.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "types": "object",
        "required": [
          "service_id",
          "service_vendor",
          "service_name",
          "service_version"
        ],
        "properties": {
          "service_id": {
            "description": "A unique identifier of this cloud service within the scope if this NS descriptor.",
            "type": "string"
          },
          "service_vendor": {
            "description": "The vendor id identifies the CS descriptor uniquely across all cloud service descriptors.",
            "type": "string",
            "pattern": "^[a-z0-9\\-_.]+$"
          },
          "service_name": {
            "description": "The name of the cloud service description.",
            "type": "string",
            "pattern": "^[a-z0-9\\-_.]+$"
          },
          "service_version": {
            "description": "The version of the cloud service descriptor.",
            "type": "string",
            "pattern": "^(== |>= |<= |!= )?[0-9\\-_.]+$"
          },
          "description": {
            "description": "A longer description of the cloud server.",
            "type": "string"
          }
        }
      }
    },
    "connection_points": {
      "description": "The connection points of the overall NS, that connects the NS to the external world.",
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "type": "object",
        "required": [
          "id",
          "interface",
          "type"
        ],
        "additionalProperties": true,
        "properties": {
          "id": {
            "description": "A VNF-unique id of the connection point. Can be used for references.",
            "type": "string"
          },
          "interface": {
            "description": "The type of connection point, such as a virtual port, a virtual NIC address, a physical port, a physcial NIC address, or the endpoint of a VPN tunnel.",
            "enum": [
              "ethernet",
              "ipv4",
              "ipv6"
            ]
          },
          "type": {
            "description": "The type of the connection point with respect to its visibility in the service platform",
            "enum": [
              "internal",
              "external",
              "management"
            ]
          },
          "virtual_link_reference": {
            "description": "A reference to a virtual link, i.e. the virtual_links:id.",
            "type": "string"
          }
        }
      }
    },
    "virtual_links": {
      "type": "array",
      "items": {
        "type": "object",
        "oneOf": [
          {
            "description": "A reference to an external virtual link descriptor (VLD).",
            "type": "object",
            "required": [
              "vl_group",
              "vl_name",
              "vl_version"
            ],
            "additionalProperties": false,
            "properties": {
              "vl_group": {
                "type": "string"
              },
              "vl_name": {
                "type": "string"
              },
              "vl_version": {
                "type": "string"
              },
              "vl_description": {
                "type": "string"
              }
            }
          },
          {
            "description": "A full-featured virtual link description.",
            "type": "object",
            "required": [
              "id",
              "connectivity_type",
              "connection_points_reference"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string"
              },
              "connectivity_type": {
                "enum": [
                  "E-Line",
                  "E-Tree",
                  "E-LAN"
                ]
              },
              "connection_points_reference": {
                "type": "array",
                "items": {
                  "description": "The connection point reference has to uniquely reference the connection point of the VNF. To this end, it should name the vnf_id of the network_function section and the name of the connection point of this VNF as specified in the VNFD.",
                  "type": "string",
                  "minItems": 2,
                  "uniqueItems": true
                }
              },
              "access": {
                "type": "boolean"
              },
              "external_access": {
                "type": "boolean"
              },
              "root_requirement": {
                "type": "string"
              },
              "leaf_requirement": {
                "type": "string"
              },
              "dhcp": {
                "type": "boolean"
              },
              "qos": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "forwarding_graphs": {
      "description": "The forwarding graph.",
      "type": "array",
      "items": {
        "type": "object",
        "oneOf": [
          {
            "description": "A reference to an external forwarding graph descriptor (VNFFGD).",
            "type": "object",
            "properties": {
              "fg_group": {
                "type": "string"
              },
              "fg_name": {
                "type": "string"
              },
              "fg_version": {
                "type": "string"
              },
              "fg_description": {
                "type": "string"
              }
            },
            "required": [
              "fg_group",
              "fg_name",
              "fg_version"
            ],
            "additionalProperties": false
          },
          {
            "description": "A full-featured forwarding graph description.",
            "type": "object",
            "required": [
              "fg_id"
            ],
            "properties": {
              "fg_id": {
                "description": "A unique identifier of this forwarding graph within the scope of this NS descriptor.",
                "type": "string"
              },
              "number_of_endpoints": {
                "type": "integer"
              },
              "number_of_virtual_links": {
                "type": "integer"
              },
              "constituent_virtual_links": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ]
              },
              "constituent_vnfs": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ]
              },
              "constituent_services": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ]
              },
              "network_forwarding_paths": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "fp_id": {
                      "type": "string"
                    },
                    "policy": {
                      "type": "string"
                    },
                    "connection_points": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connection_point_ref": {
                            "description": "A connection point reference, referenced by a connection point id.",
                            "type": "string"
                          },
                          "position": {
                            "description": "The possition of the connection point with the forwarding graph",
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "lifecycle_events": {
      "type": "object",
      "properties": {
        "start": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "vnf_id": {
                "type": "string"
              },
              "vnf_event": {
                "type": "string"
              }
            }
          }
        },
        "stop": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "vnf_id": {
                "type": "string"
              },
              "vnf_event": {
                "type": "string"
              }
            }
          }
        },
        "scale_out": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "vnf_id": {
                "type": "string"
              },
              "vnf_event": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "vnf_depedency": {
      "type": "array",
      "minItems": 0,
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "services_depedency": {
      "type": "array",
      "minItems": 0,
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "monitoring_parameters": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "desc": {
              "type": "string"
            },
            "metric": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            }
          }
        }
      ]
    },
    "auto_scale_policy": {
      "type": "object",
      "properties": {
        "criteria": {
          "type": "array",
          "items": [
            {
              "type": "object",
              "properties": {
                "end-to-end bandwidth": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "action": {
          "type": "string"
        }
      }
    }
  }
}