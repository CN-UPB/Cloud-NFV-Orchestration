openapi: 3.0.0

info:
  version: 1.0.0
  title: Pishahang Gatekeeper API
  description: The definition of the Gatekeeper's public API

servers:
  - url: /api/v3

tags:
  - name: Authentication
    description: User management and authentication
  - name: Descriptors
    description: Descriptors that have been uploaded and can be edited or onboarded
  - name: Services
    description: Services (onboarded service descriptors), their descriptors, and their instances
  - name: Vim
    description: Vim that have been added and can be edited or deleted

paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Create a new access token
      description:
        Given a username and a password, returns an access token and a refresh token or fails with
        error 401 if the credentials are invalid.
      operationId: gatekeeper.api.auth.createTokenFromCredentials
      requestBody:
        description: The username and password to create a new access token with
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "pishahang"
                password:
                  type: string
                  example: "1234"

      responses:
        "200":
          description: The provided credentials are valid and a new access token has been returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/AccessToken"
                  - $ref: "#/components/schemas/RefreshToken"
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"
    put:
      tags:
        - Authentication
      summary: Refresh an access token
      description:
        Given a refresh token, returns a new access token or fails with error 401 if the given
        refresh token is invalid.
      operationId: gatekeeper.api.auth.refreshToken
      requestBody:
        description: The refresh token which was handed out by the `/auth` endpoint
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          description: The provided refresh token is valid and a new access token has been returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"

  /users:
    get:
      tags:
        - Authentication
      summary: Get a list of registered users
      description: Returns a list of all registered users
      operationId: gatekeeper.api.users.getUsers
      responses:
        "200":
          description: The list of users was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Error401"
        "403":
          $ref: "#/components/responses/Error403"
        "500":
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  /descriptors:
    get:
      tags:
        - Descriptors
      summary: Get a list of descriptors
      description: Returns a list of all descriptors of a specified type
      operationId: gatekeeper.api.descriptors.getDescriptorsByType
      parameters:
        - name: type
          in: query
          required: true
          description: Specifies the descriptor type
          schema:
            $ref: "#/components/schemas/DescriptorType"
      responses:
        "200":
          description: The list of descriptors was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptors"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"
    post:
      tags:
        - Descriptors
      summary: Upload a new descriptor
      description: >
        Adds a new descriptor to the database. Note: The combination of a descriptor's vendor, name,
        and version have to be unique.
      operationId: gatekeeper.api.descriptors.addDescriptor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Descriptor"
      responses:
        "201":
          description: The descriptor was successfully added to the database.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"

  /descriptors/{id}:
    get:
      tags:
        - Descriptors
      summary: Get a descriptor by its ID
      operationId: gatekeeper.api.descriptors.getDescriptorById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the descriptor to be retrieved
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The descriptor was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
    put:
      tags:
        - Descriptors
      summary: Update a descriptor by its ID
      description: Updates the content of the descriptor specified by the given ID
      operationId: gatekeeper.api.descriptors.updateDescriptor
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the descriptor to be updated
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - descriptor
              properties:
                descriptor:
                  $ref: "#/components/schemas/DescriptorContent"
      responses:
        "200":
          description: The descriptor was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "400":
          $ref: "#/components/responses/Error400"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
    delete:
      tags:
        - Descriptors
      summary: Delete a descriptor by its ID
      description: Deletes the descriptor with the provided ID if it exists.
      operationId: gatekeeper.api.descriptors.deleteDescriptorById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the descriptor to be deleted
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The descriptor was successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"

  /services:
    get:
      tags:
        - Services
      summary: Get a list of available services
      description: Returns a list of services available for instantiation
      operationId: gatekeeper.api.services.getServices
      responses:
        "200":
          description: The list of services was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
        "500":
          $ref: "#/components/responses/Error500"
    post:
      tags:
        - Services
      summary: Add a service by onboarding a service descriptor
      description: >
        Onboards a service descriptor by its ID, adding a new available service. Snapshots of the
        service descriptor and all referenced descriptors are stored, which will be used for
        instantiation. Later edits to the corresponding descriptors will not modify the snapshots.
      operationId: gatekeeper.api.services.addService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
      responses:
        "201":
          description: The service descriptor was successfully onboarded and can now be instantiated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"

  /services/{id}:
    get:
      tags:
        - Services
      summary: Get a service by its ID
      operationId: gatekeeper.api.services.getServiceById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the service to be retrieved
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Details on the service were successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
    delete:
      tags:
        - Services
      summary: Delete a service by its ID
      description: Deletes the service with the provided ID if it exists and it has no instances.
      operationId: gatekeeper.api.services.deleteServiceById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the service to be deleted
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The service was successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"

  /vims:
    get:
      tags:
        - Vim
      summary: Get a list of added Vims
      operationId: gatekeeper.api.vims.getAllVims
      responses:
        "200":
          description: The list of Vims was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vims"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"
    post:
      tags:
        - Vim
      summary: Add a Vim
      operationId: gatekeeper.api.vims.addVim
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Aws"
                - $ref: "#/components/schemas/OpenStack"
                - $ref: "#/components/schemas/Kubernetes"
      responses:
        "200":
          description: The vim is successfully deleted.
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
  /vims/{id}:
    delete:
      tags:
        - Vim
      summary: Delete a Vim by its ID
      description: Deletes the Vim with the provided ID if it exists.
      operationId: gatekeeper.api.vims.deleteVim
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the vim to be deleted
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The vim is successfully deleted.
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
  /vims/aws/{id}:
    put:
      tags:
        - Vim
      summary: Update a Vim by its ID
      description: Updates the content of the descriptor specified by the given ID
      operationId: gatekeeper.api.vims.updateAwsVim
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the vim to be updated
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                accessKey:
                  type: string
                secretKey:
                  type: string

      responses:
        "200":
          description: The descriptor was successfully updated at the database.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"

components:
  schemas:
    BaseEntity:
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          description: A randomly generated uuid
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    DescriptorType:
      type: string
      enum: [service, vm, cn, fpga]
    DescriptorContent:
      type: object
      example:
        descriptor_version: "1.0"
        vendor: "my.vendor"
        name: "example-descriptor"
        version: "1.0.0"
    Descriptor:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - type
            - descriptor
          properties:
            type:
              $ref: "#/components/schemas/DescriptorType"
            descriptor:
              $ref: "#/components/schemas/DescriptorContent"
    Descriptors:
      type: "array"
      items:
        $ref: "#/components/schemas/Descriptor"

    Service:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - descriptorSnapshots
            - rootDescriptorId
          properties:
            descriptorSnapshots:
              $ref: "#/components/schemas/Descriptors"
            rootDescriptorId:
              type: string
              format: uuid
    Services:
      type: "array"
      items:
        $ref: "#/components/schemas/Service"

    BaseVim:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - vimName
            - country
            - city
          properties:
            vimName:
              type: string
            country:
              type: string
            city:
              type: string
    OpenStack:
      allOf:
        - $ref: "#/components/schemas/BaseVim"
        - type: object
          required:
            - vimAddress
            - tenantId
            - tenantExternalNetwrokId
            - tenantExternalRouterId
            - username
            - password
            - type
          properties:
            type:
              type: string
              enum: ["aws"]
            vimAddress:
              type: string
            tenantId:
              type: string
            tenantExternalNetwrokId:
              type: string
            tenantExternalRouterId:
              type: string
            username:
              type: string
            password:
              type: string
    Kubernetes:
      allOf:
        - $ref: "#/components/schemas/BaseVim"
        - type: object
          required:
            - vimAddress
            - serviceToken
            - ccc
            - type
          properties:
            type:
              type: string
              enum: ["kubernetes"]
            vimAddress:
              type: string
            serviceToken:
              type: string
            ccc:
              type: string
    Aws:
      allOf:
        - $ref: "#/components/schemas/BaseVim"
        - type: object
          required:
            - type
            - accessKey
            - secretKey
          properties:
            type:
              type: string
              enum: ["aws"]
            accessKey:
              type: string
            secretKey:
              type: string
    Vims:
      type: "array"
      items:
        oneOf:
          - $ref: "#/components/schemas/OpenStack"
          - $ref: "#/components/schemas/Aws"
          - $ref: "#/components/schemas/Kubernetes"

    User:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - username
            - isAdmin
          properties:
            username:
              type: string
            password:
              type: string
              writeOnly: true
            isAdmin:
              type: boolean
    Users:
      type: "array"
      items:
        $ref: "#/components/schemas/User"

    AccessToken:
      required:
        - accessToken
        - expiresIn
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          readOnly: true
    RefreshToken:
      required:
        - refreshToken
        - refreshExpiresIn
      properties:
        refreshToken:
          type: string
        refreshExpiresIn:
          type: integer
          readOnly: true

    Message:
      required:
        - status
        - detail
      properties:
        status:
          type: integer
        detail:
          type: string

  responses:
    Error400:
      description: The request is invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error401:
      description: The access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error403:
      description: The action requires elevated privileges.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error404:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error500:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: gatekeeper.api.auth.getTokenInfo
