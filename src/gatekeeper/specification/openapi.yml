openapi: 3.0.0

info:
  version: 1.0.0
  title: Pishahang Gatekeeper API
  description: The definition of the Gatekeeper's public API

servers:
  - url: /api/v3

tags:
  - name: Authentication
    description: User management and authentication
  - name: Uploaded Descriptors
    description:
      Descriptors that have been uploaded and can be edited or onboarded, yet cannot
      directly be instantiated
  - name: Onboarded Descriptors
    description: Descriptors that have been onboarded and can be instantiated

paths:
  /tokens:
    post:
      tags:
        - Authentication
      summary: Create a new access token
      description:
        Given a username and a password, returns a new token object or fails with an error message.
        In case of invalid credentials, error 400 will be returned.
      operationId: gatekeeper.api.auth.createTokenFromCredentials
      requestBody:
        description: The username and password to create a new access token with
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "pishahang"
                password: 
                  type: string
                  example: "1234"
      responses:
        "200":
          description: The provided credentials are valid and a new access token has been returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeycloakToken"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"

  /users:
    get:
      tags:
        - Authentication
      summary: Get a list of registered users
      description: Returns a list of all registered users
      operationId: gatekeeper.api.users.getUsers
      responses:
        "200":
          description: The list of users was successfully returned.
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  /uploaded-descriptors:
    get:
      tags:
        - Uploaded Descriptors
      summary: Get a list of uploaded descriptors
      description: Returns a list of all uploaded descriptors of a specified type
      operationId: gatekeeper.api.descriptors.getUploadedDescriptorsByType
      parameters:
        - name: type
          in: query
          required: true
          description: Specifies the descriptor type
          schema:
            $ref: "#/components/schemas/DescriptorType"
      responses:
        "200":
          description: The list of descriptors was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptors"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"
    post:
      tags:
        - Uploaded Descriptors
      summary: Upload a new descriptor
      description: Adds a new descriptor to the database
      operationId: gatekeeper.api.descriptors.addUploadedDescriptor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - descriptor
              properties:
                type:
                  $ref: "#/components/schemas/DescriptorType"
                descriptor:
                  type: object

      responses:
        "200":
          description: The descriptor was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "400":
          $ref: "#/components/responses/Error400"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"

  /uploaded-descriptors/{id}:
    get:
      tags:
        - Uploaded Descriptors
      summary: Get a descriptor by its ID
      operationId: gatekeeper.api.descriptors.getUploadedDescriptorById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the descriptor to be retrieved
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The descriptor was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"
    put:
      tags:
        - Uploaded Descriptors
      summary: Update a descriptor by its ID
      description: Updates the content of the descriptor specified by the given ID
      operationId: gatekeeper.api.descriptors.updateUploadedDescriptor
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the descriptor to be updated
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - descriptor
              properties:
                descriptor:
                  type: object

      responses:
        "200":
          description: The descriptor was successfully added to the database.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"
    delete:
      tags:
        - Uploaded Descriptors
      summary: Delete a descriptor by its ID
      description: Deletes the descriptor with the provided ID if it exists.
      operationId: gatekeeper.api.descriptors.deleteUploadedDescriptorById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the descriptor to be deleted
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The descriptor was successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Descriptor"
        "404":
          $ref: "#/components/responses/Error404"
        "500":
          $ref: "#/components/responses/Error500"

  

  /vims/openStack:
    # get:
    #   summary: Get a list of VIMs
    #   description: Returns a list of VIMs of a specified type.
    #   operationId: gatekeeper.api.vims.getopenStack
    #   parameters:
    #     - name: type
    #       in: query
    #       required: true
    #       description: Specifies the VIM t  q123ype
    #       schema:
    #         $ref: "#/components/schemas/VimType"
    #   responses:
    #     "200":
    #       description: The list of VIMs was successfully returned
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/openStacks"
    #     "500":
    #       $ref: "#/components/responses/Error500"
    post:
      summary: "Add a Openstack VIM"
      operationId: "gatekeeper.api.vims.openStack"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                vimAddress:
                  type: string
                tenantId:
                  type: string
                tenantExternalNetwrokId:
                  type: string
                tenantExternalRouterId:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "Add vim request's uuid returned"
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /vims/kubernetes:
    post:
      summary: "Add a Kubernetes VIM"
      operationId: "gatekeeper.api.vims.kubernetes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                vimAddress:
                  type: string
                serviceToken:
                  type: string
                ccc:
                  type: string
      responses:
        200:
          description: "Add vim request's uuid returned"
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
  /vims/aws:
    post:
      summary: "Add a AWS VIM"
      operationId: "gatekeeper.api.vims.aws"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                secretKey:
                  type: string
      responses:
        200:
          description: "Add vim request's uuid returned"
        404:
          $ref: "#/components/responses/Error404"
        500:
          $ref: "#/components/responses/Error500"
    #     200:
    #       description: Deletion of a descriptor executed successfully
    #     404:
    #       description: A descriptor with this UUID does not exist, or has already been deleted.

components:
  schemas:
    VimType:
      type: string
      enum: [openStack, AWS, kubernetes]
    DescriptorType:
      type: string
      enum: [service, vm, cn, fpga]
    Descriptor:
      required:
        - descriptor
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/DescriptorType"
        descriptor:
          type: object
    Descriptors:
      type: "array"
      items:
        $ref: "#/components/schemas/Descriptor"
    Message:
      required:
        - status
        - detail
      properties:
        status:
          type: integer
        detail:
          type: string
    openStack:
      required:
        - uuid
      properties:
        uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
    openStacks:
      type: array
      $ref: "#/components/schemas/openStack"
    KeycloakToken:
      required:
        - accessToken
        - expiresIn
        - refreshExpiresIn
        - refreshToken
      properties:
        accessToken: 
          type: string
        expiresIn:
          type: integer
        refreshExpiresIn:
          type: integer
        refreshToken:
          type: string

  responses:
    Error400:
      description: The request is invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error401:
      description: The access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error404:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Error500:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: gatekeeper.api.auth.getTokenInfo
